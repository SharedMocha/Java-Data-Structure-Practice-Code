/*
Given an array of strings, return all groups of strings that are anagrams. Represent a group by a list of integers representing the index in the original list. Look at the sample case for clarification.

 Anagram : a word, phrase, or name formed by rearranging the letters of another, such as 'spar', formed from 'rasp' 
 Note: All inputs will be in lower-case. 
Example :

Input : cat dog god tca
Output : [[1, 4], [2, 3]]
cat and tca are anagrams which correspond to index 1 and 4. 
dog and god are another set of anagrams which correspond to index 2 and 3.
The indices are 1 based ( the first element has index 1 instead of index 0).

 Ordering of the result : You should not change the relative ordering of the words / phrases within the group. Within a group containing A[i] and A[j], A[i] comes before A[j] if i < j. 
 
 */
 
 public class Solution {
	public ArrayList<ArrayList<Integer>> anagrams(final List<String> a) {
	  ArrayList<ArrayList<Integer>> answers = new ArrayList<ArrayList<Integer>>();
	  	   	    //Hashtable hash = new Hashtable();
	  	   	    //String, ArrayList<Integer>
	  	HashMap<String, ArrayList<Integer>> hash = new HashMap<>();


 for(int i=0 ; i <a.size();i++)
	    {
	        char[]  tempChar  = a.get(i).toLowerCase().toCharArray();
	        Arrays.sort(tempChar);
	        String  orderedString   = new String(tempChar);
	        ArrayList<Integer> answers2 = new ArrayList<Integer>();
	   //String key = Collections.sort(a.get(i));
	   //String sortedTextKey = Collections.sort(key);
	    if(hash.containsKey(orderedString)){
	        //answers.add((int)hash.get(key));
	        //answers.add(i);
	        answers2 = (ArrayList)hash.get(orderedString);
	        answers2.add(i+1);
	        //answers.add(answers2);
	        hash.put(orderedString,answers2);
	        //answers[0] = (int)hash.get(key);
	        //answers[0] = i;
	        //answers = answers2;
	        //break;
	    }
	    else{
	        answers2.add(i+1);
	        answers.add(answers2);
	        hash.put(orderedString,answers2);
	        //answers2 = new ArrayList<Integer>();
	        //answers2.add(i);
	        //answers.add(answers2);
	    }
	}
	return answers;
	}
}
